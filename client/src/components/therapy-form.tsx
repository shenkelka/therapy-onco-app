import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { X, Clock, Activity, Target, Shield, Dna, Zap } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { insertTherapyEntrySchema } from "@shared/schema";
import SupportiveMessage from "./supportive-message";
import { notificationService } from "@/lib/notifications";

const formSchema = insertTherapyEntrySchema.extend({
  sideEffects: z.array(z.string()).default([]),
  physicalActivityType: z.string().optional(),
  comments: z.string().optional(),
  reminder: z.string().optional(),
});

type FormData = z.infer<typeof formSchema>;

interface TherapyFormProps {
  onSuccess: () => void;
  entry?: any; // For editing existing entries
}

export default function TherapyForm({ onSuccess, entry }: TherapyFormProps) {
  const [selectedWellbeing, setSelectedWellbeing] = useState<number | null>(entry?.wellbeingSeverity || null);
  const [sideEffects, setSideEffects] = useState<string[]>(entry?.sideEffects || []);
  const [customMedication, setCustomMedication] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: entry ? {
      date: entry.date,
      cycle: entry.cycle,
      cycleDay: entry.cycleDay,
      treatmentType: entry.treatmentType,
      medications: entry.medications,
      wellbeingSeverity: entry.wellbeingSeverity,
      sideEffects: entry.sideEffects || [],
      physicalActivity: entry.physicalActivity,
      physicalActivityType: entry.physicalActivityType || "",
      comments: entry.comments || "",
      reminder: entry.reminder || "",
      mood: entry.mood || "üòä",
    } : {
      date: new Date().toISOString().split('T')[0],
      cycle: undefined,
      cycleDay: undefined,
      treatmentType: "",
      medications: "",
      wellbeingSeverity: 3,
      sideEffects: [],
      physicalActivity: "",
      physicalActivityType: "",
      comments: "",
      reminder: "",
      mood: "üòä",
    },
  });

  const createEntryMutation = useMutation({
    mutationFn: async (data: FormData) => {
      if (entry) {
        return await apiRequest("PUT", `/api/therapy-entries/${entry.id}`, data);
      } else {
        return await apiRequest("POST", "/api/therapy-entries", data);
      }
    },
    onSuccess: async (_, data) => {
      toast({
        title: entry ? "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" : "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        description: entry ? "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ —Ç–µ—Ä–∞–ø–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" : "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ —Ç–µ—Ä–∞–ø–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/therapy-entries"] });

      // Schedule notifications based on therapy entry
      try {
        // Send supportive message
        if (data.sideEffects && data.sideEffects.length > 0) {
          await notificationService.sendSupportiveMessage(
            "–ü–æ–º–Ω–∏—Ç–µ: –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã, –∞ –≤–∞—à–∞ —Å–∏–ª–∞ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é.",
            data.treatmentType,
            data.sideEffects
          );
        }

        // Schedule medication reminder if reminder text is provided
        if (data.reminder && data.medications) {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          await notificationService.scheduleMedicationReminder(
            data.medications,
            tomorrow.toISOString(),
            data.reminder
          );
        }

        // Suggest activity if none reported
        if (data.physicalActivity === 'none') {
          setTimeout(async () => {
            await notificationService.suggestActivity(
              "–õ–µ–≥–∫–∞—è 10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
              "–î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ"
            );
          }, 5000); // 5 seconds delay
        }
      } catch (error) {
        console.warn('Failed to schedule notifications:', error);
      }

      onSuccess();
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
        variant: "destructive",
      });
    },
  });

  const handleSideEffectChange = (effect: string, checked: boolean) => {
    const newEffects = checked
      ? [...sideEffects, effect]
      : sideEffects.filter(e => e !== effect);
    setSideEffects(newEffects);
    form.setValue('sideEffects', newEffects);
  };

  const handleWellbeingSelect = (rating: number) => {
    setSelectedWellbeing(rating);
    form.setValue('wellbeingSeverity', rating);
  };

  const onSubmit = (data: FormData) => {
    createEntryMutation.mutate({
      ...data,
      sideEffects,
      wellbeingSeverity: selectedWellbeing || data.wellbeingSeverity,
    });
  };

  const watchTreatmentType = form.watch('treatmentType');
  const watchSideEffects = form.watch('sideEffects');
  const watchPhysicalActivity = form.watch('physicalActivity');

  return (
    <div className="bg-white rounded-t-3xl w-full">
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-800">–î–Ω–µ–≤–Ω–∏–∫ —Ç–µ—Ä–∞–ø–∏–∏</h2>
          <Button
            variant="ghost"
            size="icon"
            onClick={onSuccess}
            className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center"
          >
            <X className="w-4 h-4 text-gray-600" />
          </Button>
        </div>

        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          {/* 1. –î–∞—Ç–∞ */}
          <div>
            <Label className="text-sm font-medium text-gray-700">–î–∞—Ç–∞</Label>
            <Input
              type="date"
              {...form.register('date')}
              className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>

          {/* 2. –í–∏–¥ —Ç–µ—Ä–∞–ø–∏–∏ */}
          <div>
            <Label className="text-sm font-medium text-gray-700">–í–∏–¥ —Ç–µ—Ä–∞–ø–∏–∏</Label>
            <div className="grid grid-cols-2 gap-3 mt-2">
              {[
                { value: "chemotherapy", label: "–•–∏–º–∏–æ—Ç–µ—Ä–∞–ø–∏—è", icon: Activity, color: "bg-blue-50 hover:bg-blue-100 border-blue-200" },
                { value: "targeted", label: "–¢–∞—Ä–≥–µ—Ç–Ω–∞—è", icon: Target, color: "bg-green-50 hover:bg-green-100 border-green-200" },
                { value: "immunotherapy", label: "–ò–º–º—É–Ω–æ—Ç–µ—Ä–∞–ø–∏—è", icon: Shield, color: "bg-purple-50 hover:bg-purple-100 border-purple-200" },
                { value: "hormonal", label: "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è", icon: Dna, color: "bg-pink-50 hover:bg-pink-100 border-pink-200" },
                { value: "radiation", label: "–õ—É—á–µ–≤–∞—è", icon: Zap, color: "bg-orange-50 hover:bg-orange-100 border-orange-200" },
              ].map((treatment) => {
                const Icon = treatment.icon;
                const isSelected = form.watch('treatmentType') === treatment.value;
                return (
                  <label 
                    key={treatment.value} 
                    className={`flex flex-col items-center p-4 border-2 rounded-xl cursor-pointer transition-all ${
                      isSelected 
                        ? treatment.color.replace('hover:', '') + ' ring-2 ring-purple-500' 
                        : treatment.color
                    }`}
                  >
                    <input
                      type="radio"
                      value={treatment.value}
                      {...form.register('treatmentType')}
                      className="sr-only"
                    />
                    <Icon className="w-6 h-6 mb-2 text-gray-600" />
                    <span className="text-sm font-medium text-center">{treatment.label}</span>
                  </label>
                );
              })}
            </div>
          </div>

          {/* 3. –£—Å–ª–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ—Ä–∞–ø–∏–π */}
          {watchTreatmentType && watchTreatmentType !== "" && (
            <>
              {/* –¶–∏–∫–ª –∏ –î–µ–Ω—å —Ü–∏–∫–ª–∞ */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium text-gray-700">–¶–∏–∫–ª</Label>
                  <Input
                    type="number"
                    min="1"
                    placeholder="1"
                    {...form.register('cycle', { valueAsNumber: true })}
                    className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
                <div>
                  <Label className="text-sm font-medium text-gray-700">–î–µ–Ω—å —Ü–∏–∫–ª–∞</Label>
                  <Input
                    type="number"
                    min="1"
                    max="21"
                    placeholder="1-21"
                    {...form.register('cycleDay', { valueAsNumber: true })}
                    className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
              </div>

              {/* –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã */}
              <div>
                <Label className="text-sm font-medium text-gray-700">–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã</Label>
                <Select onValueChange={(value) => {
                  if (value === "custom") {
                    setCustomMedication(true);
                    form.setValue('medications', '');
                  } else {
                    setCustomMedication(false);
                    form.setValue('medications', value);
                  }
                }}>
                  <SelectTrigger className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–î–æ–∫—Å–æ—Ä—É–±–∏—Ü–∏–Ω">–î–æ–∫—Å–æ—Ä—É–±–∏—Ü–∏–Ω</SelectItem>
                    <SelectItem value="–¶–∏–∫–ª–æ—Ñ–æ—Å—Ñ–∞–º–∏–¥">–¶–∏–∫–ª–æ—Ñ–æ—Å—Ñ–∞–º–∏–¥</SelectItem>
                    <SelectItem value="–ü–∞–∫–ª–∏—Ç–∞–∫—Å–µ–ª">–ü–∞–∫–ª–∏—Ç–∞–∫—Å–µ–ª</SelectItem>
                    <SelectItem value="–ö–∞—Ä–±–æ–ø–ª–∞—Ç–∏–Ω">–ö–∞—Ä–±–æ–ø–ª–∞—Ç–∏–Ω</SelectItem>
                    <SelectItem value="–ì–µ—Ä—Ü–µ–ø—Ç–∏–Ω">–ì–µ—Ä—Ü–µ–ø—Ç–∏–Ω</SelectItem>
                    <SelectItem value="–ü–µ—Ä—Ç—É–∑—É–º–∞–±">–ü–µ—Ä—Ç—É–∑—É–º–∞–±</SelectItem>
                    <SelectItem value="–¢–∞–º–æ–∫—Å–∏—Ñ–µ–Ω">–¢–∞–º–æ–∫—Å–∏—Ñ–µ–Ω</SelectItem>
                    <SelectItem value="–õ–µ—Ç—Ä–æ–∑–æ–ª">–õ–µ—Ç—Ä–æ–∑–æ–ª</SelectItem>
                    <SelectItem value="custom">–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</SelectItem>
                  </SelectContent>
                </Select>
                
                {customMedication && (
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞..."
                    {...form.register('medications')}
                    className="mt-3 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                )}
              </div>

              {/* –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ - Improved Scale */}
              <div>
                <Label className="text-sm font-medium text-gray-700">–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 6</Label>
                <div className="p-4 bg-gray-50 rounded-xl mt-2">
                  <div className="flex justify-between items-center mb-3">
                    <span className="text-xs text-gray-500">–û—á–µ–Ω—å –ø–ª–æ—Ö–æ</span>
                    <span className="text-xs text-gray-500">–û—Ç–ª–∏—á–Ω–æ</span>
                  </div>
                  <div className="relative">
                    {/* Scale Background */}
                    <div className="w-full h-2 bg-gray-200 rounded-full relative">
                      <div 
                        className="h-2 bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 rounded-full transition-all duration-300"
                        style={{ width: selectedWellbeing ? `${(selectedWellbeing / 6) * 100}%` : '0%' }}
                      />
                    </div>
                    {/* Scale Points */}
                    <div className="flex justify-between mt-2">
                      {[1, 2, 3, 4, 5, 6].map((rating) => (
                        <button
                          key={rating}
                          type="button"
                          onClick={() => handleWellbeingSelect(rating)}
                          className={`w-8 h-8 rounded-full border-2 transition-all duration-200 flex items-center justify-center text-sm font-medium ${
                            selectedWellbeing === rating 
                              ? "border-purple-500 bg-purple-500 text-white shadow-lg scale-110" 
                              : "border-gray-300 bg-white text-gray-600 hover:border-purple-300 hover:scale-105"
                          }`}
                        >
                          {rating}
                        </button>
                      ))}
                    </div>
                    {selectedWellbeing && (
                      <div className="text-center mt-3">
                        <span className={`text-sm font-medium ${
                          selectedWellbeing >= 5 ? "text-green-600" :
                          selectedWellbeing >= 3 ? "text-yellow-600" :
                          "text-red-600"
                        }`}>
                          {selectedWellbeing === 1 ? "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ" :
                           selectedWellbeing === 2 ? "–ü–ª–æ—Ö–æ" :
                           selectedWellbeing === 3 ? "–ù–æ—Ä–º–∞–ª—å–Ω–æ" :
                           selectedWellbeing === 4 ? "–•–æ—Ä–æ—à–æ" :
                           selectedWellbeing === 5 ? "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ" :
                           "–û—Ç–ª–∏—á–Ω–æ"}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
              <div>
                <Label className="text-sm font-medium text-gray-700">–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</Label>
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {[
                    "–¢–æ—à–Ω–æ—Ç–∞",
                    "–£—Å—Ç–∞–ª–æ—Å—Ç—å", 
                    "–í—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å",
                    "–ë–æ–ª—å",
                    "–î–∏–∞—Ä–µ—è",
                    "–†–≤–æ—Ç–∞",
                    "–ü–æ—Ç–µ—Ä—è –∞–ø–ø–µ—Ç–∏—Ç–∞",
                    "–°–ª–∞–±–æ—Å—Ç—å"
                  ].map((effect) => (
                    <label key={effect} className="flex items-center p-2 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50">
                      <Checkbox
                        checked={sideEffects.includes(effect)}
                        onCheckedChange={(checked) => handleSideEffectChange(effect, !!checked)}
                        className="mr-2"
                      />
                      <span className="text-sm">{effect}</span>
                    </label>
                  ))}
                </div>
              </div>

              {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              <div>
                <Label className="text-sm font-medium text-gray-700">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –∫–∞–∫–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ)</Label>
                <Textarea
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã..."
                  {...form.register('comments')}
                  className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent h-24 resize-none"
                />
              </div>

              {/* –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
              <div>
                <Label className="text-sm font-medium text-gray-700">–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Label>
                <Select onValueChange={(value) => form.setValue('physicalActivity', value)}>
                  <SelectTrigger className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">–ù–µ—Ç</SelectItem>
                    <SelectItem value="moderate">–£–º–µ—Ä–µ–Ω–Ω–∞—è</SelectItem>
                    <SelectItem value="high">–í—ã—Å–æ–∫–∞—è</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è) */}
              {(watchPhysicalActivity === 'moderate' || watchPhysicalActivity === 'high') && (
                <div>
                  <Label className="text-sm font-medium text-gray-700">–ö–∞–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?</Label>
                  <Select onValueChange={(value) => form.setValue('physicalActivityType', value)}>
                    <SelectTrigger className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="walking">–ü—Ä–æ–≥—É–ª–∫–∞</SelectItem>
                      <SelectItem value="running">–ë–µ–≥</SelectItem>
                      <SelectItem value="cycling">–í–µ–ª–æ—Å–∏–ø–µ–¥</SelectItem>
                      <SelectItem value="gym">–ó–∞–Ω—è—Ç–∏–µ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ</SelectItem>
                      <SelectItem value="swimming">–ü–ª–∞–≤–∞–Ω–∏–µ</SelectItem>
                      <SelectItem value="other">–î—Ä—É–≥–æ–µ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              )}

              {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏ */}
              {watchTreatmentType === 'hormonal' && (
                <div>
                  <Label className="text-sm font-medium text-gray-700">
                    <Clock className="w-4 h-4 inline mr-2" />
                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                  </Label>
                  <Textarea
                    placeholder="–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–µ—Ç–∫—É –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç—å —É–∫–æ–ª..."
                    {...form.register('reminder')}
                    className="mt-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent h-20 resize-none"
                  />
                </div>
              )}
            </>
          )}

          {/* –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã */}
          <SupportiveMessage 
            treatmentType={watchTreatmentType} 
            sideEffects={watchSideEffects}
          />

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <Button
            type="submit"
            disabled={createEntryMutation.isPending || !watchTreatmentType}
            className="w-full bg-primary hover:bg-primary/90 text-white font-semibold py-4 rounded-xl"
          >
            {createEntryMutation.isPending ? "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"}
          </Button>
        </form>
      </div>
    </div>
  );
}
