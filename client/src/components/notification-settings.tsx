import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Bell, BellOff, Check, X } from "lucide-react";
import { notificationService } from "@/lib/notifications";
import { useToast } from "@/hooks/use-toast";

export default function NotificationSettings() {
  const [isSupported, setIsSupported] = useState(false);
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [settings, setSettings] = useState({
    medicationReminders: true,
    supportiveMessages: true,
    activitySuggestions: true,
    therapyReminders: true
  });
  const [isInitializing, setIsInitializing] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // Check support and permission status
    setIsSupported(notificationService.isSupported());
    setPermission(notificationService.getPermissionStatus());

    // Load saved settings
    const saved = localStorage.getItem('notification_settings');
    if (saved) {
      try {
        setSettings(JSON.parse(saved));
      } catch (error) {
        console.error('Failed to load notification settings:', error);
      }
    }
  }, []);

  const handleEnableNotifications = async () => {
    setIsInitializing(true);
    
    try {
      const success = await notificationService.initialize();
      if (success) {
        setPermission('granted');
        toast({
          title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!",
          description: "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        });

        // Show test notification
        await notificationService.showNotification(
          "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!",
          "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ—á–µ–Ω–∏–∏",
          "support"
        );
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Failed to enable notifications:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        variant: "destructive"
      });
    } finally {
      setIsInitializing(false);
    }
  };

  const handleSettingChange = (key: keyof typeof settings, value: boolean) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    localStorage.setItem('notification_settings', JSON.stringify(newSettings));
  };

  const testNotification = async (type: 'medication' | 'support' | 'activity') => {
    if (permission !== 'granted') return;

    const notifications = {
      medication: {
        title: "üíä –¢–µ—Å—Ç: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ",
        body: "–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –¢–∞–º–æ–∫—Å–∏—Ñ–µ–Ω"
      },
      support: {
        title: "üíö –¢–µ—Å—Ç: –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        body: "–í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–ª–∏—á–Ω–æ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é"
      },
      activity: {
        title: "üèÉ‚Äç‚ôÄÔ∏è –¢–µ—Å—Ç: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        body: "–õ–µ–≥–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
      }
    };

    const notification = notifications[type];
    await notificationService.showNotification(notification.title, notification.body, type);

    toast({
      title: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    });
  };

  if (!isSupported) {
    return (
      <Card className="p-6">
        <div className="flex items-center space-x-3 mb-4">
          <BellOff className="w-5 h-5 text-gray-400" />
          <h3 className="font-semibold text-gray-800">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
        </div>
        <p className="text-sm text-gray-600">
          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </p>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="flex items-center space-x-3 mb-6">
        <Bell className="w-5 h-5 text-gray-600" />
        <h3 className="font-semibold text-gray-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
      </div>

      {permission !== 'granted' ? (
        <div className="space-y-4">
          <p className="text-sm text-gray-600">
            –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          </p>
          <Button 
            onClick={handleEnableNotifications}
            disabled={isInitializing}
            className="w-full"
          >
            {isInitializing ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞..." : "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}
          </Button>
        </div>
      ) : (
        <div className="space-y-6">
          <div className="flex items-center space-x-2 text-green-600 text-sm">
            <Check className="w-4 h-4" />
            <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</span>
          </div>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label htmlFor="medication-reminders" className="text-sm font-medium">
                –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö
              </Label>
              <Switch
                id="medication-reminders"
                checked={settings.medicationReminders}
                onCheckedChange={(checked) => handleSettingChange('medicationReminders', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="supportive-messages" className="text-sm font-medium">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
              </Label>
              <Switch
                id="supportive-messages"
                checked={settings.supportiveMessages}
                onCheckedChange={(checked) => handleSettingChange('supportiveMessages', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="activity-suggestions" className="text-sm font-medium">
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              </Label>
              <Switch
                id="activity-suggestions"
                checked={settings.activitySuggestions}
                onCheckedChange={(checked) => handleSettingChange('activitySuggestions', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="therapy-reminders" className="text-sm font-medium">
                –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–µ—Ä–∞–ø–∏–∏
              </Label>
              <Switch
                id="therapy-reminders"
                checked={settings.therapyReminders}
                onCheckedChange={(checked) => handleSettingChange('therapyReminders', checked)}
              />
            </div>
          </div>

          <div className="border-t pt-4">
            <Label className="text-sm font-medium text-gray-700 mb-3 block">
              –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </Label>
            <div className="grid grid-cols-1 gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => testNotification('medication')}
                disabled={!settings.medicationReminders}
              >
                –¢–µ—Å—Ç: –õ–µ–∫–∞—Ä—Å—Ç–≤–æ
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => testNotification('support')}
                disabled={!settings.supportiveMessages}
              >
                –¢–µ—Å—Ç: –ü–æ–¥–¥–µ—Ä–∂–∫–∞
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => testNotification('activity')}
                disabled={!settings.activitySuggestions}
              >
                –¢–µ—Å—Ç: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              </Button>
            </div>
          </div>
        </div>
      )}
    </Card>
  );
}