import { 
  users, 
  therapyEntries, 
  helpRequests, 
  helpResponses,
  type User, 
  type InsertUser,
  type TherapyEntry,
  type InsertTherapyEntry,
  type HelpRequest,
  type InsertHelpRequest,
  type HelpResponse,
  type InsertHelpResponse
} from "@shared/schema";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Therapy entry operations
  getTherapyEntries(userId: number): Promise<TherapyEntry[]>;
  getTherapyEntry(id: number): Promise<TherapyEntry | undefined>;
  createTherapyEntry(entry: InsertTherapyEntry): Promise<TherapyEntry>;
  updateTherapyEntry(id: number, entry: InsertTherapyEntry): Promise<TherapyEntry | undefined>;
  
  // Help request operations
  getHelpRequests(): Promise<HelpRequest[]>;
  getHelpRequestsByUser(userId: number): Promise<HelpRequest[]>;
  getHelpRequest(id: number): Promise<HelpRequest | undefined>;
  createHelpRequest(request: InsertHelpRequest): Promise<HelpRequest>;
  updateHelpRequestStatus(id: number, status: string): Promise<HelpRequest | undefined>;
  
  // Help response operations
  getHelpResponsesForRequest(helpRequestId: number): Promise<HelpResponse[]>;
  createHelpResponse(response: InsertHelpResponse): Promise<HelpResponse>;
  updateHelpResponseStatus(id: number, status: string): Promise<HelpResponse | undefined>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private therapyEntries: Map<number, TherapyEntry>;
  private helpRequests: Map<number, HelpRequest>;
  private helpResponses: Map<number, HelpResponse>;
  private currentUserId: number;
  private currentTherapyEntryId: number;
  private currentHelpRequestId: number;
  private currentHelpResponseId: number;

  constructor() {
    this.users = new Map();
    this.therapyEntries = new Map();
    this.helpRequests = new Map();
    this.helpResponses = new Map();
    this.currentUserId = 1;
    this.currentTherapyEntryId = 1;
    this.currentHelpRequestId = 1;
    this.currentHelpResponseId = 1;
    
    // Add demo user
    this.createUser({
      username: "maria",
      password: "password",
      name: "–ú–∞—Ä–∏—è",
      age: 35,
      location: "–ú–æ—Å–∫–≤–∞"
    });

    // Add demo therapy entries
    setTimeout(() => {
      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-20",
        cycle: 3,
        cycleDay: 2,
        treatmentType: "targeted",
        medications: "–¢—Ä–∞—Å—Ç—É–∑—É–º–∞–±",
        wellbeingSeverity: 6,
        sideEffects: [],
        physicalActivity: "high",
        physicalActivityType: "gym",
        comments: "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ! –ü–æ–ª–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏, —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª",
        mood: "üòç"
      });

      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-19",
        cycle: 2,
        cycleDay: 5,
        treatmentType: "chemotherapy",
        medications: "–î–æ–∫—Å–æ—Ä—É–±–∏—Ü–∏–Ω, –¶–∏–∫–ª–æ—Ñ–æ—Å—Ñ–∞–º–∏–¥",
        wellbeingSeverity: 3,
        sideEffects: ["–¢–æ—à–Ω–æ—Ç–∞", "–£—Å—Ç–∞–ª–æ—Å—Ç—å"],
        physicalActivity: "moderate",
        physicalActivityType: "walking",
        comments: "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–ø–ª–æ—Ö–æ, –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–æ—Ç–∏–≤–æ—Ä–≤–æ—Ç–Ω—ã–µ",
        mood: "üòå"
      });

      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-18",
        cycle: 2,
        cycleDay: 4,
        treatmentType: "hormonal",
        medications: "–¢–∞–º–æ–∫—Å–∏—Ñ–µ–Ω",
        wellbeingSeverity: 2,
        sideEffects: ["–ü—Ä–∏–ª–∏–≤—ã", "–°–ª–∞–±–æ—Å—Ç—å"],
        physicalActivity: "none",
        comments: "–ü—Ä–∏–ª–∏–≤—ã –º–µ—à–∞—é—Ç —Å–ø–∞—Ç—å, –Ω–æ –≤ —Ü–µ–ª–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        reminder: "–ü—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 20:00",
        mood: "üòä"
      });

      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-17",
        cycle: 1,
        cycleDay: 12,
        treatmentType: "targeted",
        medications: "–ì–µ—Ä—Ü–µ–ø—Ç–∏–Ω",
        wellbeingSeverity: 1,
        sideEffects: [],
        physicalActivity: "high",
        physicalActivityType: "yoga",
        comments: "–û—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Ö–æ—Ä–æ—à–∞—è –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å",
        mood: "üòÑ"
      });

      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-16",
        cycle: 1,
        cycleDay: 8,
        treatmentType: "immunotherapy",
        medications: "–ü–µ–º–±—Ä–æ–ª–∏–∑—É–º–∞–±",
        wellbeingSeverity: 4,
        sideEffects: ["–£—Å—Ç–∞–ª–æ—Å—Ç—å", "–ë–æ–ª—å"],
        physicalActivity: "light",
        physicalActivityType: "walking",
        comments: "–ß—É–≤—Å—Ç–≤—É—é —Å–∏–ª—å–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        mood: "üòî"
      });

      this.createTherapyEntry({
        userId: 1,
        date: "2025-01-15",
        cycle: 3,
        cycleDay: 1,
        treatmentType: "radiation",
        medications: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —Ç–µ—Ä–∞–ø–∏—è",
        wellbeingSeverity: 3,
        sideEffects: ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∫–æ–∂–∏"],
        physicalActivity: "moderate",
        physicalActivityType: "swimming",
        comments: "–ö–æ–∂–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—Å–Ω–µ–ª–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±–ª—É—á–µ–Ω–∏—è",
        mood: "üòê"
      });

      // Add demo help requests
      this.createHelpRequest({
        userId: 1,
        title: "–ü–æ–º–æ—á—å –¥–æ–π—Ç–∏ –¥–æ –∞–ø—Ç–µ–∫–∏",
        description: "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∞–ø—Ç–µ–∫–∏ –∑–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏",
        helpType: "transport",
        location: "—Ä–∞–π–æ–Ω –ê—Ä–±–∞—Ç"
      });

      this.createHelpRequest({
        userId: 1,
        title: "–ü–æ–≥—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ",
        description: "–ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ª–µ–≥–∫–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ",
        helpType: "walk",
        location: "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"
      });
    }, 100);
    
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const user: User = { 
      ...insertUser, 
      id,
      location: insertUser.location || null,
      age: insertUser.age || null,
      createdAt: new Date()
    };
    this.users.set(id, user);
    return user;
  }

  async getTherapyEntries(userId: number): Promise<TherapyEntry[]> {
    return Array.from(this.therapyEntries.values())
      .filter(entry => entry.userId === userId)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  }

  async getTherapyEntry(id: number): Promise<TherapyEntry | undefined> {
    return this.therapyEntries.get(id);
  }

  async createTherapyEntry(insertEntry: InsertTherapyEntry): Promise<TherapyEntry> {
    const id = this.currentTherapyEntryId++;
    const entry: TherapyEntry = { 
      ...insertEntry,
      id,
      cycle: insertEntry.cycle || null,
      cycleDay: insertEntry.cycleDay || null,
      sideEffects: insertEntry.sideEffects || null,
      physicalActivityType: insertEntry.physicalActivityType || null,
      comments: insertEntry.comments || null,
      reminder: insertEntry.reminder || null,
      mood: insertEntry.mood || null,
      createdAt: new Date()
    };
    this.therapyEntries.set(id, entry);
    return entry;
  }

  async updateTherapyEntry(id: number, insertEntry: InsertTherapyEntry): Promise<TherapyEntry | undefined> {
    const existingEntry = this.therapyEntries.get(id);
    if (!existingEntry) {
      return undefined;
    }

    const updatedEntry: TherapyEntry = { 
      ...insertEntry,
      id,
      cycle: insertEntry.cycle || null,
      cycleDay: insertEntry.cycleDay || null,
      sideEffects: insertEntry.sideEffects || null,
      physicalActivityType: insertEntry.physicalActivityType || null,
      comments: insertEntry.comments || null,
      reminder: insertEntry.reminder || null,
      mood: insertEntry.mood || null,
      createdAt: existingEntry.createdAt // Keep original creation date
    };
    this.therapyEntries.set(id, updatedEntry);
    return updatedEntry;
  }

  async getHelpRequests(): Promise<HelpRequest[]> {
    return Array.from(this.helpRequests.values())
      .filter(request => request.status === "active")
      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());
  }

  async getHelpRequestsByUser(userId: number): Promise<HelpRequest[]> {
    return Array.from(this.helpRequests.values())
      .filter(request => request.userId === userId)
      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());
  }

  async getHelpRequest(id: number): Promise<HelpRequest | undefined> {
    return this.helpRequests.get(id);
  }

  async createHelpRequest(insertRequest: InsertHelpRequest): Promise<HelpRequest> {
    const id = this.currentHelpRequestId++;
    const request: HelpRequest = { 
      ...insertRequest, 
      id,
      location: insertRequest.location || null,
      status: "active",
      createdAt: new Date()
    };
    this.helpRequests.set(id, request);
    return request;
  }

  async updateHelpRequestStatus(id: number, status: string): Promise<HelpRequest | undefined> {
    const request = this.helpRequests.get(id);
    if (request) {
      const updatedRequest = { ...request, status };
      this.helpRequests.set(id, updatedRequest);
      return updatedRequest;
    }
    return undefined;
  }

  async getHelpResponsesForRequest(helpRequestId: number): Promise<HelpResponse[]> {
    return Array.from(this.helpResponses.values())
      .filter(response => response.helpRequestId === helpRequestId)
      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());
  }

  async createHelpResponse(insertResponse: InsertHelpResponse): Promise<HelpResponse> {
    const id = this.currentHelpResponseId++;
    const response: HelpResponse = { 
      ...insertResponse, 
      id,
      message: insertResponse.message || null,
      status: "pending",
      createdAt: new Date()
    };
    this.helpResponses.set(id, response);
    return response;
  }

  async updateHelpResponseStatus(id: number, status: string): Promise<HelpResponse | undefined> {
    const response = this.helpResponses.get(id);
    if (response) {
      const updatedResponse = { ...response, status };
      this.helpResponses.set(id, updatedResponse);
      return updatedResponse;
    }
    return undefined;
  }
}

export const storage = new MemStorage();
